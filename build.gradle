buildscript {
    repositories {
        maven {
            url "https://sgeb.github.io/maven_repo/"
        }
    }

    dependencies {
        classpath "me.sgeb.gradle:gradle-native-artifacts-plugin:1.1.0-SNAPSHOT"
    }
}

def localIvyRepoUri = uri("$rootProject.projectDir/../local_ivy_repo")
if (System.env.IVY_REPO_DIR) { localIvyRepoUri = System.env.IVY_REPO_DIR }

apply plugin: 'cpp'
apply plugin: 'native-artifacts'
apply plugin: 'ivy-publish'

group "com.github.opencash"
version "0.1.0"
status "integration"

repositories {
    ivy {
        url localIvyRepoUri
    }
    ivy {
        url "https://opencash.github.io/ivy_repo/"
    }
}

model {
    platforms {
        "osx-x86_64" {
            operatingSystem "osx"
            architecture "x86_64"
        }

        "linux-amd64" {
            operatingSystem "linux"
            architecture "amd64"
        }

        "android-arm" {
            operatingSystem "linux"
            architecture "arm"
        }
    }

    buildTypes {
        debug
        release
    }

    toolChains {
        gcc(Gcc)
        clang(Clang)

        "linux-amd64"(Gcc) {
            def prefix = "x86_64-pc-linux-"
            CCompiler.executable         = prefix + CCompiler.executable
            cppCompiler.executable       = prefix + cppCompiler.executable
            assembler.executable         = prefix + assembler.executable
            linker.executable            = prefix + linker.executable
            staticLibArchiver.executable = prefix + staticLibArchiver.executable

            addPlatformConfiguration(new LinuxAmd64Configuration())
        }

        "android-arm"(Gcc) {
            def prefix = "arm-linux-androideabi-"
            CCompiler.executable         = prefix + CCompiler.executable
            cppCompiler.executable       = prefix + cppCompiler.executable
            assembler.executable         = prefix + assembler.executable
            linker.executable            = prefix + linker.executable
            staticLibArchiver.executable = prefix + staticLibArchiver.executable

            addPlatformConfiguration(new AndroidArmConfiguration())
        }
    }
}

libraries {
    clishared {
        binaries.all {
            cppCompiler.args "-I${projectDir}/src/cli/cpp/vendor"
        }
    }
}

executables.all { ext.purpose = null }
executables {
    cli {
        baseName 'opencash'
    }

    unitTests {
        purpose = "test"

        binaries.all { binary ->
            def myPlatform = binary.targetPlatform.name
            project.dependencies {
                add binary.narConfName,
                    [group: "com.github.opencash.vendor", name: "gtest",
                        version: "1.7.0", configuration: myPlatform]

                add binary.narConfName,
                    [group: "com.github.opencash.vendor", name: "gmock",
                        version: "1.7.0", configuration: myPlatform]
            }

            linker.args '-lopencash'
            linker.args '-lPocoFoundation'
            linker.args '-lgtest'
            linker.args '-lgtest_main'
            linker.args '-lgmock'
        }
    }

    featureTests {
        purpose = "test"

        binaries.all {
            cppCompiler.args "-I${projectDir}/src/featuretests/cpp/vendor"
        }
    }

    all {
        binaries.all {
            lib libraries.clishared.static
        }
    }

    matching { it.purpose == "test" }.all {
        binaries.all {
            targetBuildTypes "debug"
            cppCompiler.args "-I${projectDir}/src/cli/cpp"
        }
    }
}

sources {
    clishared {
        cpp {
            source.srcDirs = ['src/cli/cpp']
            source.include "**/*.cpp"
            source.exclude 'main.cpp'
        }
    }

    cli {
        cpp {
            source.srcDirs = ['src/cli/cpp']
            source.include 'main.cpp'
        }
    }

    unitTests {
        cpp {
            source.srcDirs = ['src/unittests/cpp']
            source.include "**/*.cpp"
        }
    }

    featureTests {
        cpp {
            source.srcDirs = ['src/featuretests/cpp']
            source.include "**/*.cpp"
        }
    }
}

binaries.all { binary ->
  def myPlatform = binary.targetPlatform.name
    project.dependencies {
      add binary.narConfName,
          [group: "com.github.opencash", name: "libopencash",
            version: "0.1.0", configuration: "$myPlatform-static-debug"]
    }

    if (toolChain in Gcc || toolChain in Clang) {
        cppCompiler.args "-std=c++11"
        cppCompiler.args "-I${binary.narDepsDir}/include"

        // Mac OS X must build with libc++
        if (targetPlatform.operatingSystem.macOsX) {
            cppCompiler.args "-stdlib=libc++"
            linker.args "-lc++"
        }

        if (buildType == buildTypes.debug) {
            cppCompiler.args "-g"
        }

        if (buildType == buildTypes.release) {
            cppCompiler.args "-O2"
        }

        linker.args "-L${binary.narDepsDir}/lib"
    }
}

nativeArtifacts {
    cli {
        from (executables.cli) {
            it.buildType == buildTypes.debug
        }
    }
}

publishing {
    publications {
        cli(IvyPublication) {
            from nativeArtifacts.cli
        }
    }

    repositories {
        ivy {
            url localIvyRepoUri
        }
    }
}

task build {
    description "Builds all binaries on all buildable platforms."
    dependsOn binaries.matching { it.buildable && !(it instanceof SharedLibraryBinary) }
}

task test {
    description "Builds and runs all tests for current platform."

    def testExecutables = binaries.withType(ExecutableBinary).matching {
        it.component.purpose == "test" &&
            it.targetPlatform.operatingSystem.current &&
            it.targetPlatform.architecture.name == System.properties['os.arch']
    }

    dependsOn testExecutables

    doLast {
        testExecutables.all { test ->
            exec {
              logger.quiet ""
              logger.quiet ">>> Testing `${relativePath test.executableFile}`"
              logger.quiet ""
              commandLine test.executableFile
            }
        }
    }
}

task describe {
    description 'Prints additional information on the build and the system.'
    doLast {
        println "Running on  : " + org.gradle.internal.os.OperatingSystem.current()
        println "Gradle      : " + gradle.gradleVersion
        println "Java home   : " + System.properties.'java.home'
        println ""
        println "Project     : " + project.name
        println "Subprojects : " + project.subprojects
        println "BuildDir    : " + buildDir
        println "Executables : " + project.executables
        println "Libraries   : " + project.libraries
        println "Sources     : " + project.sources

        println ""
        println "Binaries:"
        project.binaries.withType(ExecutableBinary).all { println "\t${it}" }
        project.binaries.withType(LibraryBinary).all { println "\t${it}" }

        project.sources.all { funcSourceSet ->
            println ""
            println "Source info '${funcSourceSet.name}':"
            funcSourceSet.all { langSourceSet ->
                println "\t${langSourceSet}"
                langSourceSet.source.files.each { println "\t\t${it}" }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    description 'Updates the wrapper'
    gradleVersion = '1.11'
}

defaultTasks("tasks")

//////////////////////////////////////////////////////////////////////////////

class LinuxAmd64Configuration implements TargetPlatformConfiguration {
    boolean supportsPlatform(Platform platform) {
        return platform.operatingSystem.linux && platform.architecture.amd64
    }

    List<String> getCCompilerArgs() {
        []
    }

    List<String> getCppCompilerArgs() {
        []
    }

    List<String> getObjectiveCCompilerArgs() {
        []
    }

    List<String> getObjectiveCppCompilerArgs() {
        []
    }

    List<String> getAssemblerArgs() {
        []
    }

    List<String> getLinkerArgs() {
        []
    }

    List<String> getStaticLibraryArchiverArgs() {
        []
    }
}

//////////////////////////////////////////////////////////////////////////////

class AndroidArmConfiguration implements TargetPlatformConfiguration {
    boolean supportsPlatform(Platform platform) {
        return platform.operatingSystem.linux &&
            platform.architecture.arm &&
            platform.name.toLowerCase().contains("android")
    }

    List<String> getCCompilerArgs() {
        []
    }

    List<String> getCppCompilerArgs() {
        []
    }

    List<String> getObjectiveCCompilerArgs() {
        []
    }

    List<String> getObjectiveCppCompilerArgs() {
        []
    }

    List<String> getAssemblerArgs() {
        []
    }

    List<String> getLinkerArgs() {
        []
    }

    List<String> getStaticLibraryArchiverArgs() {
        []
    }
}
